class PrefixSum:
    def subarraySumArray(self, nums, k):
        # corner case
        if not nums:
            return 0
        
        # calculate prefix_sum
        cur_sum = 0
        prefix_sum = [0] * len(nums)
        res = 0        
        for i in range(len(nums)):
            cur_sum += nums[i]
            ## check in array
            if cur_sum == k:
                res += 1
                
            for j in range(i):
                if cur_sum - k == prefix_sum[j]:
                    res += 1            
            ## put in array
            prefix_sum[i] = cur_sum
        
        return res

    def subarraySum(self, nums, k):    
        cur_sum = 0
        prefix_sum = {}
        prefix_sum[0] = 1
        res = 0            
        for i in range(len(nums)):
            cur_sum += nums[i]                    
            # find result before current index
            res += prefix_sum.get(cur_sum - k, 0)
            # put current result in data structure
            prefix_sum[cur_sum] = prefix_sum.get(cur_sum, 0) + 1        
        return res

    def subarrayDivideK(self, A, K):
        # corner case
        if not A:
            return 0
        
        # construct prefix_sum_dict
        prefix_sum_dict = {}
        cur_sum = 0
        for i in range(len(A)):
            cur_sum += A[i]
            if not prefix_sum_dict.get(cur_sum):
                prefix_sum_dict[cur_sum] = [i]
            else:
                prefix_sum_dict[cur_sum].append(i)        
        
        # find valid subarray
        res = 0
        prefix_sum_arr = sorted(list(prefix_sum_dict.keys()))
        num_k = (prefix_sum_arr[-1] - prefix_sum_arr[0]) // K
        for i in prefix_sum_arr:
            if i % K == 0:
                res += len(prefix_sum_dict.get(i))
                
            for n in range(-num_k - 1, num_k + 1):                
                if i + n * K in prefix_sum_dict.keys():
                    res += self.find_valid_pair(prefix_sum_dict.get(i), prefix_sum_dict.get(i + n * K))
        return res        

    def find_valid_pair(self, arr_1, arr_2):
        res = 0        
        for i in arr_1:            
            for j in arr_2:
                if i < j:
                    res += 1
        return res

if __name__ == "__main__":
    test_sum = [
        ([1, 1, 1], 2),
        ([],5),
        ([1, 1, 1, 2], 2),
        ([1, 1, 1, 2, 1], 2),
        ([1, 2, 3], 3),
        ([1], 0),
        ([-1, -1, 1], 0),
        ([-916,-132,-202,-524,739,57,938,546,948,-181,-315,921,792,-992,-69,588,712,509,-406,302,-637,169,407,993,-263,54,-512,-950,-930,66,147,-9,-136,-205,274,992,-304,-835,659,-792,-288,146,182,-672,-374,-943,-85,958,-19,33,-676,232,92,-132,-121,-944,-526,-869,-423,-855,818,46,401,633,-457,63,824,-172,237,360,43,831,-432,213,-330,-788,-472,-70,-507,615,-953,457,-89,-756,477,445,153,-779,710,484,-20,802,-261,-481,-309,-992,-240,275,-302,-137,295,-232,529,691,873,787,229,677,-388,996,301,-641,-983,108,-247,431,-668,877,528,-69,-15,278,-334,775,770,-720,232,-607,896,496,485,350,772,-656,379,730,-445,-152,295,99,-945,-170,-594,271,894,-451,-455,636,-210,674,554,183,446,-709,-599,521,711,-739,-712,-947,-940,-577,71,672,-512,-216,669,137,-61,-901,-867,-168,-838,-653,-503,-535,-423,-922,281,544,-373,-935,-485,760,-203,-656,-241,493,-290,-298,756,-871,-525,614,230,-910,-395,-308,-237,289,975,-215,542,674,798,95,-989,912,-943,-262,-501,-670,-878,-40,983,963,-136,682,-383,-537,-724,382,-831,726,91,666,-795,308,-519,-891,-313,960,-785,-629,519,783,-2,705,-658,993,656,795,441,145,-298,411,-593,-738,-701,-453,857,769,-841,-609,248,-315,-465,-2,93,748,-75,-227,-426,-446,428,54,324,-72,-340,-361,-327,204,991,-720,-861,-33,-517,454,241,-34,-750,-31,-476,-428,909,-221,-981,168,352,-443,-733,821,-287,395,691,-230,45,-752,-524,-998,-245,-947,560,308,-144,223,-802,844,-321,194,-666,-960,-920,-668,989,-735,-566,-298,652,215,916,862,261,-894,-984,124,348,-858,-571,585,681,-197,387,-308,-349,-555,-530,993,464,-285,-195,-786,777,-819,-45,-792,200,994,82,832,-70,-578,-244,-546,-866,-746,563,-359,-857,-610,-518,-902,-746,540,-721,184,-523,-64,466,-166,719,-76,937,-150,-55,849,-42,-403,-492,-24,-850,-448,-460,167,596,-799,523,-699,975,104,658,-274,462,618,-320,-330,-639,-541,-218,-627,-303,-504,781,-564,967,-635,-523,-918,-529,705,624,-196,814,-165,142,-103,935,573,45,-377,661,-521,691,-81,-496,-883,995,227,592,606,-756,183,-486,-767,-68,648,666,-134,977,617,-545,735,-502,-730,779,-744,-123,-495,-848,937,-227,-470,401,-909,-135,884,484,326,-910,953,-321,352,134,-683,855,199,-966,-900,290,-575,-194,828,743,-762,-846,530,-603,679,132,380,-596,110,-678,842,505,-925,993,-765,374,-694,-346,656,-332,-131,-846,-196,34,408,-612,-701,316,-803,-123,-417,887,823,-696,850,762,-231,-863,-758,-782,-504,670,164,-878,-260,561,-448,37,660,-776,787,782,-712,31,-106,485,-345,-802,-512,-305,776,796,788,-575,-577,-268,38,356,-221,649,378,-128,-779,317,313,673,-494,-126,92,910,-343,675,857,-850,-322,-607,318,-694,523,-880,-800,936,204,-275,-822,-528,928,-242,-420,-769,39,982,-373,517,332,-459,-408,-125,-15,304,56,777,-52,496,-610,-877,-308,-876,-148,266,-441,-341,-489,-214,276,27,-413,-534,-805,-607,-808,-568,73,532,732,689,-653,-489,-198,383,851,452,-47,-987,-549,379,-693,-921,-428,-261,707,777,-969,728,-868,341,803,-593,241,122,551,-523,-189,461,-447,130,242,-71,582,-86,16,110,579,-519,-434,-904,27,-359,986,955,783,-195,-911,-29,744,-390,808,-666,-24,962,114,873,473,162,73,-366,975,-207,419,225,-809,656,-85,536,-417,345,-940,805,48,335,967,790,258,-546,-179,-34,651,257,-111,-456,912,251,-639,-24,-638,50,-536,90,112,812,-504,346,553,-571,830,-511,-340,-464,566,-594,-953,715,-697,538,-709,230,-949,-547,-982,-183,238,82,20,-600,-16,47,917,269,-895,768,714,391,104,577,951,510,-226,85,347,-263,-8,100,-670,295,788,-645,-191,534,856,248,568,961,820,-570,552,-772,-892,-109,-312,-979,631,-688,830,-164,-942,-431,898,-358,907,-186,-350,753,-199,-15,-657,-426,-382,53,688,-971,-245,748,703,-633,-232,178,-8,-923,225,-925,-715,-666,-264,-411,-966,-423,-330,633,642,718,690,-434,770,689,902,597,-877,543,-358,-510,93,191,588,-65,-822,-75,857,871,-266,-965,-577,-533,158,-971,-993,615,242,230,-580,-352,611,-684,-280,812,32,-57,651,-916,-733,-763,112,556,102,-283,855,-398,267,839,-527,-58,-64,-68,303,10,16,242,241,-305,-2,927,-41,-71,-362,118,61,-250,454,-801,-479,-518,-659,432,577,799,515,-127,237,597,-907,-597,912,955,-181,-595,455,-626,-383,712,-742,-774,-63,-351,-680,-577,706,868,-306,-778,92,718,-746,-512,310,-534,-868,-546,-32,499,-15,-358,-171,909,-151,357,471,-284,928,8,-186,743,-230,-632,-282,-211,274,68,-88,-979,-12,-673,580,-156,250,903,918,-589,492,446,-133,412,-445,-125,-164,-736,112,-240,-815,-832,991,-965,28,-956,-879,143,346,420,8,-672,-142,-942,347,-844,720,-622,-473,-46,-163,-735,734,-471,-269,-526,-911,-732,-913,966,64,-992,-407,-503,-648,763,850,-637,628,-376,-315,-134,476,-740,533,-481,504,476,-651,936,-750,16,-871,-225,-750,-1,639,114,-862,-390,776,-401,667,-519,-52,774,-143,491,-805,-316,469,-584,979,-143,535,438,935,-619,-191,-974,597,-349,-682,-922,-403,535,109,82,-544,960,397,-858,-489,57,-544,-285,806,300,-753,-86,-411,186,-652,178,909,-756,712,25,-677,86,-156,622,-503,862,-127,-281,700,158,474,-655,512,920,917,760,879,-538,384,-210,-501,-617,300,970,266,514,293,291,586,-308,-24,821,576,267,32,780,341,637,914,822,197,629,456,-774,864,84,-179,973,772,-963,-579,-961,294,-293,846,-97,-685,-462,-183,536,493,927,871,990,-154,-478,300,-486,-827,677,796,433,-184,77,745,-651,-938,-614,193,-21,-644,303,283,-831,631,607,66,168,447,830,28,886,-827,-108,-70,-230,-937,602,206,453,382,-105,-997,780,-292,857,794,-409,-24,-82,408,-606,617,-271,-7,832,385,73,-786,-868,-711,823,-10,549,-765,226,-792,914,179,-293,-122,-31,419,344,-401,359,-321,157,-865,628,995,-738,731,336,-335,658,-337,852,-665,977,-302,680,-161,-404,-146,703,-162,633,-234,-389,-931,955,807,-170,-83,-245,736,-314,-869,-736,970,-326,491,-783,-182,174,-985,-248,25,-657,802,-849,929,-618,-720,206,-316,839,-406,64,54,-819,195,93,985,513,230,-545,969,509,-844,323,667,376,885,-979,561,71,-880,35,657,926,-562,804,-940,479,485,-734,976,186,339,806,65,-163,-849,-76,968,569,44,255,868,382,911,73,16,-164,548,-919,-344,-533,-831,825,-856,159,129,-900,-116,-469,-807,-197,198,-775,144,696,842,62,-273,129,847,149,407,-681,-831,-656,-551,871,-329,-466,-379,-874,780,541,322,232,-332,-170,-829,-673,-833,-741,-308,709,701,-383,-810,-651,69,-917,420,613,494,783,23,-317,-143,-670,167,-486,459,-327,-545,-172,135,970,-352,-825,661,901,-184,-52,128,-426,407,-302,-612,-766,-999,900,645,-373,647,-828,704,-812,-847,794,-525,816,-450,-240,-400,-351,-78,479,771,-262,-311,108,197,-368,361,-226,-428,-220,966,783,-374,25,377,-978,-593,-807,-559,-950,876,-684,760,261,590,-929,-746,-382,834,404,-384,31,-168,-338,860,800,850,20,-267,-691,998,-765,-651,-205,-354,-166,-758,-85,543,-298,-831,364,4,-171,-555,-22,940,-124,-134,-432,-70,475,939,880,336,122,210,-444,968,819,-320,-248,-830,817,-798,584,389,291,203,804,838,-511,112,206,340,556,593,698,449,-874,693,187,-78,-840,100,705,569,432,-366,-834,-440,-90,975,991,809,-953,493,580,550,-764,-560,561,248,810,688,-738,946,-818,385,597,400,-973,-241,-35,63,-268,735,653,240,7,846,937,534,-724,913,747,-891,72,439,-818,519,-416,-527,803,-112,180,-878,192,225,944,-828,-410,966,-399,-839,-889,345,-815,-421,-425,958,-843,621,-800,-646,774,247,825,-624,392,285,-701,414,-298,341,-489,302,864,-267,-95,-170,-383,415,-964,718,950,-500,108,526,969,-830,-363,-739,-946,-500,-249,910,-465,133,346,-303,149,271,674,-474,473,-50,803,-179,358,10,984,-92,708,-2,-562,-596,607,-378,-995,829,-252,320,850,-574,165,-637,143,-240,108,-532,847,812,-540,-983,-804,903,-387,-707,-431,376,-131,325,-30,507,638,663,134,125,-614,-411,154,-564,426,-948,-990,-28,548,-265,-673,-212,857,-568,-921,422,-362,-359,-699,879,194,598,-857,225,-453,-137,-476,-712,-576,-347,363,835,-433,98,-306,94,585,486,-977,195,648,-257,637,143,-878,-395,990,-983,110,-550,660,776,824,-566,-844,531,525,632,-755,77,-846,-394,208,130,-162,-750,279,-490,25,762,84,-579,-14,-666,-27,540,-692,0,180,306,95,-214,826,333,-375,913,530,293,-12,664,-533,932,-566,207,-494,-667,200,195,-259,-966,564,-430,176,20,-909,462,656,-470,723,-530,-757,-331,67,516,407,-790,-989,-219,435,-473,818,-470,-590,-71,-324,-342,-843,743,-912,-105,-665,432,-316,-615,-295,87,726,74,516,145,-436,681,-434,-601,67,790,-727,-915,419,-747,252,-764,-583,-937,640,-373,157,-179,913,719,841,812,-548,-197,-301,420,662,357,-192,-656,-581,611,481,-185,-666,192,176,-874,-599,685,-993,-691,22,-815,293,698,-4,-7,-119,511,-415,700,-400,-21,808,687,913,-277,-566,-881,-367,626,429,-821,-728,565,-995,-446,146,-928,658,-807,415,265,-218,984,-121,258,872,851,-88,-432,-812,-267,-615,342,826,-4,-148,546,274,-415,-178,260,466,-960,729,-784,249,689,958,-700,-866,-970,-626,-936,-637,469,119,-342,984,242,923,754,-278,-583,924,-789,-283,-216,574,531,-572,-873,164,-29,-874,475,-528,-663,30,23,958,756,-79,-38,998,-698,504,948,-213,-122,497,-396,-839,-684,-700,-689,-181,106,-295,538,-936,-764,-298,-264,-986,-418,-639,-714,-834,293,771,-711,504,-581,123,805,-587,-524,-257,-197,-505,-649,-182,-344,978,59,319,508,-543,48,-269,-517,-604,292,201,973,-490,104,-549,-914,663,279,-977,842,-901,107,-858,-201,550,877,-257,-608,-109,401,-880,-339,-815,-41,711,733,-295,465,217,84,-890,-370,-590,350,-103,-750,-808,424,-846,248,520,-768,369,-953,652,-202,422,-831,-978,334,349,-352,-759,-615,872,-712,-887,-286,-384,540,-609,755,285,486,-888,241,380,777,641,897,434,-114,-726,-720,477,347,708,26,-797,-46,-75,608,545,-850,-386,-112,-243,95,-245,565,996,691,-697,28,799,358,474,-402,68,715,980,-168,487,-23,505,368,654,885,990,-526,-335,460,976,270,933,578,168,626,458,-974,598,991,-710,673,759,-838,-380,177,683,-831,582,724,472,454,367,-995,85,-110,321,-919,788,-625,-421,-195,-790,-790,370,-890,306,379,21,-418,69,-374,-110,-170,-993,849,-356,927,-281,-452,-137,-351,232,67,-326,-53,18,164,833,-42,-966,950,402,-819,739,551,-759,-27,432,-152,850,330,820,426,-840,693,-955,993,-469,-238,-997,-334,319,-318,-984,113,523,-591,436],-682)
    ]
    for arr, sum in test_sum:
        print("Input array: " + str(arr), "\n Target sum: " + str(sum))
        print(PrefixSum().subarraySumArray(arr, sum))

    # for arr, sum in test_sum:
    #     print("Input array: " + str(arr), "\n Target sum: " + str(sum))
    #     print(PrefixSum().subarraySum(arr, sum))

    test_divide = [
        ([4,5,0,-2,-3,1], 5)
    ]
    # for arr, sum in test_divide:
    #     print("Input array: " + str(arr), "\n Target sum: " + str(sum))
    #     print(PrefixSum().subarrayDivideK(arr, sum))